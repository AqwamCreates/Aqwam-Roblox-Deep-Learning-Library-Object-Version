Regularization = {}

Regularization.__index = Regularization

local AqwamMatrixLibrary = require(script.Parent.Parent.AqwamRobloxMatrixLibraryLinker.Value)

local defaultRegularisationMode = "L2"

local defaultLambda = 0.5

function Regularization.new(lambda, regularisationMode)
	
	local NewRegularization = {}
	
	setmetatable(NewRegularization, Regularization)
	
	NewRegularization.lambda = lambda or defaultLambda
	
	NewRegularization.regularisationMode = regularisationMode or defaultRegularisationMode
	
	return NewRegularization
	
end

function Regularization:setParameters(lambda, regularizationMode)
	
	self.lambda = lambda or self.lambda
	
	self.regularizationMode = regularizationMode or self.regularizationMode
	
	return regularizationMode
	
end

function Regularization:getLambda()
	
	return self.lambda
	
end

function Regularization:calculateLossFunctionRegularization(ModelParameters)
	
	local SquaredModelParameters 
	
	local AbsoluteModelParameters
	
	local SumSquaredModelParameters
	
	local SumAbsoluteModelParameters
	
	local LossFunctionRegularizationParameters
	
	if (self.regularizationMode == "L1") or (self.regularizationMode == "Lasso") then
		
		SquaredModelParameters = AqwamMatrixLibrary:power(ModelParameters, 2)
		
		SumSquaredModelParameters = AqwamMatrixLibrary:sum(SquaredModelParameters)
		
		LossFunctionRegularizationParameters = AqwamMatrixLibrary:multiply(self.lambda, SumSquaredModelParameters)
		
		
	elseif (self.regularizationMode == "L2") or (self.regularizationMode == "Ridge") then
		
		AbsoluteModelParameters = AqwamMatrixLibrary:applyFunction(ModelParameters, math.abs)
		
		SumAbsoluteModelParameters = AqwamMatrixLibrary:sum(AbsoluteModelParameters)
		
		LossFunctionRegularizationParameters = AqwamMatrixLibrary:multiply(self.lambda, SumAbsoluteModelParameters)
		
	elseif (self.regularizationMode == "L1+L2") or (self.regularizationMode == "ElasticNet") then
		
		SquaredModelParameters = AqwamMatrixLibrary:power(ModelParameters, 2)
		
		SumSquaredModelParameters = AqwamMatrixLibrary:sum(SquaredModelParameters)
		
		AbsoluteModelParameters = AqwamMatrixLibrary:applyFunction(ModelParameters, math.abs)
		
		SumAbsoluteModelParameters = AqwamMatrixLibrary:sum(AbsoluteModelParameters)
		
		local RegularizationParametersPart1 = AqwamMatrixLibrary:multiply(self.lambda, SumSquaredModelParameters)
		
		local RegularizationParametersPart2 = AqwamMatrixLibrary:multply(self.lambda, SumAbsoluteModelParameters)
		
		LossFunctionRegularizationParameters = AqwamMatrixLibrary:add(RegularizationParametersPart1, RegularizationParametersPart2)
		
	else
		
		error("Regularization Mode Does Not Exist!")
		
	end
	
	return LossFunctionRegularizationParameters
	
end


return Regularization

