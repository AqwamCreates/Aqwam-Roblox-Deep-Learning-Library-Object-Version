local MachineLearningBaseModel = require(script.Parent.MachineLearningBaseModel)

ExpectationMaximizationModel = {}

ExpectationMaximizationModel.__index = ExpectationMaximizationModel

setmetatable(ExpectationMaximizationModel, MachineLearningBaseModel)

local AqwamMatrixLibrary = require(script.Parent.Parent.AqwamRobloxMatrixLibraryLinker.Value)

local defaultEpsilon = 1 * math.exp(-5)

local defaultMaxNumberOfIterations = 500

local defaultNumberOfClusters = 2

local function calculateFactorial(x) -- this factorial function can only work with positive integers! This means that the data must be in integers only!
	
	if (x == 0) then return 1 end
	
	if (x == 1) then return 1 end
	
	if (x > 1) then return x * calculateFactorial(x-1) end

end

local function calculatePoisson(meanVector, featureVector)
	
	local negativeMeanVector = AqwamMatrixLibrary:multiply(-1, meanVector)
	
	local expNegativeMeanVector = AqwamMatrixLibrary:applyFunction(math.exp, negativeMeanVector)
	
	local factorialFeatureVector = AqwamMatrixLibrary:applyFunction(calculateFactorial, featureVector)
	
	local inverseFactorialFeatureVector = AqwamMatrixLibrary:divide(1, factorialFeatureVector)
	
	local meanVectorPoweredByNumberOfData = AqwamMatrixLibrary:power(meanVector, featureVector)
	
	local calculatedPoisson = AqwamMatrixLibrary:multiply(meanVectorPoweredByNumberOfData, expNegativeMeanVector, inverseFactorialFeatureVector)
	
	return calculatedPoisson
	
end

local function calculatePosteriorProbability(featureMatrix, meanMatrix, probabilities)
	
	local posteriorMatrix = AqwamMatrixLibrary:createMatrix(#meanMatrix, #meanMatrix[1], 0)
	
	local numberOfData = #featureMatrix
	
	local featureVector
	
	local meanVector
	
	local eachClass
	
	local eachClassSum
	
	local probability
	
	local poisson
	
	local eachClassDividedByEachClassSum
	
	local inverseEachClassSum
	
	for i = 1, #featureMatrix, 1 do
		
		featureVector = {featureMatrix[i]}
		
		eachClass = AqwamMatrixLibrary:createMatrix(#meanMatrix, #meanMatrix[1])
		
		for j = 1, #meanMatrix, 1 do
			
			meanVector = {meanMatrix[j]}
			
			probability = {probabilities[j]}
			
			poisson = calculatePoisson(meanMatrix, featureVector)
			
			eachClass[j] = AqwamMatrixLibrary:multiply(poisson, probability)[1]
			
		end
		
		eachClassSum = AqwamMatrixLibrary:verticalSum(eachClass)
		
		inverseEachClassSum =  AqwamMatrixLibrary:divide(1, eachClassSum)
		
		eachClassDividedByEachClassSum = AqwamMatrixLibrary:multiply(eachClass, inverseEachClassSum) -- Sometimes generate nan values. When added to non-nan values, the matrix will contain nan
		
		--if not AqwamMatrixLibrary:areMatricesEqual(eachClassDividedByEachClassSum, eachClassDividedByEachClassSum) then continue end -- A quick fix to nan issue
		
		posteriorMatrix = AqwamMatrixLibrary:add(posteriorMatrix, eachClassDividedByEachClassSum)
		
	end

	return posteriorMatrix
	
end

local function calculateOptimalProbability(posteriorMatrix)
	
	local numberOfProbabilities = #posteriorMatrix
	
	local posteriorMatrixSum = AqwamMatrixLibrary:verticalSum(posteriorMatrix)
	
	local probabilitiesMatrix = {}
	
	local probability
	
	local posteriorVector
	
	for i = 1, numberOfProbabilities, 1 do
		
		posteriorVector = {posteriorMatrix[i]}
		
		probability = AqwamMatrixLibrary:divide(posteriorVector, posteriorMatrixSum)
		
		probabilitiesMatrix[i] = probability[1]
		
	end
	
	return probabilitiesMatrix
	
end

local function calculateOptimalMean(featureMatrix, posteriorMatrix)
	
	local featureVector
	
	local posteriorVector
	
	local transposedPosteriorVector
	
	local Numerator
	
	local NumeratorSum
	
	local newMeanVector
	
	local posteriorVectorSum
	
	local newMeanMatrix = {}
	
	local featureVector 

	for i = 1, #posteriorMatrix, 1 do

		posteriorVector = {posteriorMatrix[i]}
		
		Numerator = {}
		
		for j = 1, #featureMatrix, 1 do
			
			featureVector = {featureMatrix[j]}
			
			Numerator[j] = AqwamMatrixLibrary:multiply(featureVector, posteriorVector)[1] -- [1] is added so that we remove 1 dimension to merge with the Numerator
			
		end
		
		NumeratorSum = AqwamMatrixLibrary:verticalSum(Numerator)
		
		newMeanVector = AqwamMatrixLibrary:divide(NumeratorSum, posteriorVector)
		
		newMeanMatrix[i] = newMeanVector[1] -- [1] is added so that we remove 1 dimension to merge with the newMeanMatrix
 		
	end
	
	return newMeanMatrix
	
end

local function calculateIncompleteLogLikelihood(featureMatrix, meanMatrix, probabilitiesMatrix)
	
	local numberOfData = #featureMatrix
	
	local logLikesVector = {}
	
	local logLike
	
	local likelihood
	
	local likelihoodVector = {}
	
	local likelihoodVectorSum
	
	local featureVector
	
	local meanVector
	
	local probability
	
	local poisson
	
	local incomplete
	
	local probabilityTransposed
	
	for i = 1, #featureMatrix, 1 do
		
		featureVector = {featureMatrix[i]}
		
		for j = 1, #meanMatrix, 1 do
			
			probability = {probabilitiesMatrix[j]}
			
			meanVector = {meanMatrix[j]}
			
			poisson = calculatePoisson(meanVector, featureVector)
			
			probabilityTransposed = AqwamMatrixLibrary:transpose(probability)
			
			likelihood = AqwamMatrixLibrary:dotProduct(poisson, probabilityTransposed)
			
			table.insert(likelihoodVector, {likelihood})
			
		end
		
		logLike = AqwamMatrixLibrary:applyFunction(math.log10, likelihoodVector)
			
		table.insert(logLikesVector, logLike[1])
		
	end
	
	incomplete = AqwamMatrixLibrary:sum(logLikesVector)
	
	return incomplete
	
end

function ExpectationMaximizationModel.new(maxNumberOfIterations, epsilon, numberOfClusters)
	
	local NewExpectationMaximizationModel = MachineLearningBaseModel.new()
	
	setmetatable(NewExpectationMaximizationModel, ExpectationMaximizationModel)
	
	NewExpectationMaximizationModel.numberOfClusters = numberOfClusters or defaultNumberOfClusters
	
	NewExpectationMaximizationModel.epsilon = nil or defaultEpsilon
	
	NewExpectationMaximizationModel.maxNumberOfIterations = maxNumberOfIterations or defaultMaxNumberOfIterations
	
	return NewExpectationMaximizationModel
	
end

function ExpectationMaximizationModel:setParameters(maxNumberOfIterations, epsilon, numberOfClusters)

	self.numberOfClusters = numberOfClusters or self.numberOfClusters

	self.epsilon = self.epsilon

	self.maxNumberOfIterations = maxNumberOfIterations or self.maxNumberOfIterations

end


function ExpectationMaximizationModel:train(featureMatrix)
	
	local incompletes = {}
	
	local costArray = {}
	
	local cost = math.huge

	local numberOfIterations = 0
	
	local posteriorMatrix

	local incompleteLogLikelihood

	local current

	local previous
		
	self.epsilon = self.epsilon or (defaultEpsilon * #featureMatrix) 
	
	local meanMatrix = self.ModelParameters[1] or AqwamMatrixLibrary:createRandomNormalMatrix(self.numberOfClusters, #featureMatrix[1])
	
	local probabilitiesMatrix = self.ModelParameters[2] or AqwamMatrixLibrary:createRandomNormalMatrix(self.numberOfClusters, #featureMatrix[1])
	
	if (#featureMatrix[1] ~= #meanMatrix[1]) then error("The number of features are not the same as the model parameters!") end
	
	repeat
		
		numberOfIterations += 1
		
		posteriorMatrix = calculatePosteriorProbability(featureMatrix, meanMatrix, probabilitiesMatrix)
		
		self.probabilitiesMatrix = calculateOptimalProbability(posteriorMatrix)
		
		self.meanMatrix = calculateOptimalMean(featureMatrix, posteriorMatrix)
		
		incompleteLogLikelihood = calculateIncompleteLogLikelihood(featureMatrix, meanMatrix, probabilitiesMatrix)
		
		table.insert(incompletes, incompleteLogLikelihood)
		
		if (#incompletes > 1) then
			
			current = incompletes[#incompletes]
			
			previous = incompletes[#incompletes - 1]
			
			cost = current - previous
			
		end
		
		table.insert(costArray, cost)
		
		MachineLearningBaseModel:printCostAndNumberOfIterations(cost, numberOfIterations, self.IsOutputPrinted)
		
	until (numberOfIterations == self.maxNumberOfIterations) or (cost <= self.epsilon)
	
	self.ModelParameters = {self.meanMatrix, self.probabilitiesMatrix}
	
	return costArray
	
end

function ExpectationMaximizationModel:predict(featureVector)
	
	local selectedCluster
	
	local probability
	
	local highestProbability = -math.huge
	
	local probabilityVector
	
	local posteriorMatrix = calculatePosteriorProbability(featureVector, self.meanMatrix, self.probabilitiesMatrix)
	
	local posteriorMatrixSum = AqwamMatrixLibrary:horizontalSum(posteriorMatrix)
	
	for cluster = 1, #posteriorMatrix, 1 do
		
		probability = posteriorMatrixSum[cluster][1]
		
		if (probability > highestProbability) then
			
			selectedCluster = cluster
			
			probabilityVector = {posteriorMatrix[cluster]}
			
			highestProbability = probability
			
		end
		 
	end
	
	return selectedCluster, probabilityVector
	
end

return ExpectationMaximizationModel
