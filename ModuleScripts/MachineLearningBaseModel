MachineLearningBaseModel = {}

MachineLearningBaseModel.__index = MachineLearningBaseModel

function MachineLearningBaseModel.new()
	
	local NewMachineLearningBaseModel = {}
	
	setmetatable(NewMachineLearningBaseModel, MachineLearningBaseModel)
	
	NewMachineLearningBaseModel.PrintOutput = true

	NewMachineLearningBaseModel.ModelParameters = nil
	
	NewMachineLearningBaseModel.LastPredictedOutput = nil
	
	NewMachineLearningBaseModel.LastCalculations = nil

	return NewMachineLearningBaseModel
	
end

function MachineLearningBaseModel:getModelParameters()
	
	return self.ModelParameters
	
end

function MachineLearningBaseModel:setModelParameters(ModelParameters)
	
	self.ModelParameters = ModelParameters or self.ModelParameters
	
end

function MachineLearningBaseModel:clearModelParameters()
	
	self.ModelParameters = nil
	
end

function MachineLearningBaseModel:clearLastPredictedOutput()
	
	self.LastPredictedOutput = nil
	
end

function MachineLearningBaseModel:clearLastCalculations()
	
	self.LastCalculations = nil
	
end

function MachineLearningBaseModel:clearLastPredictedOutputAndCalculations()
	
	MachineLearningBaseModel:clearLastCalculations()
	
	MachineLearningBaseModel:clearLastPredictedOutput()
	
end

function MachineLearningBaseModel:printOutputCostAndNumberOfIterations(cost, numberOfIteration)
	
	print(self.PrintOutput)

	if (self.PrintOutput) then print("Iteration: " .. numberOfIteration .. "\t\tCost: " .. cost) end

end


function MachineLearningBaseModel:setPrintOutput(option)
	
	self.PrintOutput = option or self.PrintOutput
	
end


function MachineLearningBaseModel:Destroy()
	
	setmetatable(self, nil)
	
	table.clear(self)
	
	table.freeze(self)
	
end

return MachineLearningBaseModel
